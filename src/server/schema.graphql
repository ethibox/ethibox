scalar Date

type User {
    id: Int
    email: String
    firstName: String
    lastName: String
    isAdmin: Boolean
}

type Stripe {
    stripeEnabled: String
    stripePublishableKey: String
    stripeClientSecret: String
    stripeLast4: String
}

input VarInput {
    name: String
    value: String
}

type Vars {
    id: Int
    name: String
    value: String
}

type Invoice {
    url: String
    status: String
    total: Int
    date: Date
}

type Template {
    id: Int
    name: String
    fullName: String
    description: String
    screenshots: [String]
    trial: Int
    price: Int
    category: String
    logo: String
    website: String
    enabled: Boolean
}

type Application {
    id: Int
    name: String
    description: String
    price: Int
    adminPath: String
    releaseName: String
    domain: String
    logo: String
    category: String
    task: String
    state: String
    error: String
    lastTaskDate: Date
}

type Subscription {
    id: Int
    price: Int
}

type UserSubscription {
    updateUrl: String
    cancelUrl: String
}

input WebhookInput {
    event: String
    targetUrl: String
}

type Webhook {
    id: Int
    event: String
    targetUrl: String
}

type Select {
    text: String
    value: String
}

type Envs {
    name: String
    value: String
    label: String
    disabled: Boolean
    type: String
    select: [Select]
}

type Summary {
    templates: [Template]
    applications: Int
    priceAvg: Int
    total: Int
}

type Query {
    user: User
    stripe: Stripe
    summary: Summary
    userSubscription: UserSubscription
    subscription: Subscription
    applicationEnvs(releaseName: String): [Envs]
    applications: [Application]
    application(releaseName: String): Application
    templates: [Template]
    invoices: [Invoice]
    webhooks: [Webhook]
    settings: [Vars]
    globalEnvs: [Vars]
}

type LoginResponse {
    token: String
    user: User
}

type Mutation {
    register(email: String!, password: String!): LoginResponse!
    login(email: String!, password: String!, remember: Boolean): LoginResponse!
    reset(email: String!): Boolean
    resetpassword(token: String!, password: String!): Boolean
    removePaymentMethod: Boolean
    deleteAccount: Boolean
    installApplication(templateId: Int): Boolean
    uninstallApplication(releaseName: String!): Boolean
    updateUser(firstName: String, lastName: String, email: String): Boolean
    updateSettings(settings: [VarInput]): Boolean
    updateGlobalEnvs(globalEnvs: [VarInput]): Boolean
    updateDefaultPaymentMethod(paymentMethodId: String): Boolean
    updateWebhooks(webhooks: [WebhookInput]): Boolean
    upgradeStripeSubscription(appId: Int, price: Int): Boolean
    downgradeStripeSubscription(appId: Int): Boolean
    uploadTemplates(file: Upload!): Boolean
}
